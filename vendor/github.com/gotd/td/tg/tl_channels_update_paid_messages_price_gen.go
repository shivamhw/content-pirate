// Code generated by gotdgen, DO NOT EDIT.

package tg

import (
	"context"
	"errors"
	"fmt"
	"sort"
	"strings"

	"go.uber.org/multierr"

	"github.com/gotd/td/bin"
	"github.com/gotd/td/tdjson"
	"github.com/gotd/td/tdp"
	"github.com/gotd/td/tgerr"
)

// No-op definition for keeping imports.
var (
	_ = bin.Buffer{}
	_ = context.Background()
	_ = fmt.Stringer(nil)
	_ = strings.Builder{}
	_ = errors.Is
	_ = multierr.AppendInto
	_ = sort.Ints
	_ = tdp.Format
	_ = tgerr.Error{}
	_ = tdjson.Encoder{}
)

// ChannelsUpdatePaidMessagesPriceRequest represents TL type `channels.updatePaidMessagesPrice#fc84653f`.
//
// See https://core.telegram.org/method/channels.updatePaidMessagesPrice for reference.
type ChannelsUpdatePaidMessagesPriceRequest struct {
	// Channel field of ChannelsUpdatePaidMessagesPriceRequest.
	Channel InputChannelClass
	// SendPaidMessagesStars field of ChannelsUpdatePaidMessagesPriceRequest.
	SendPaidMessagesStars int64
}

// ChannelsUpdatePaidMessagesPriceRequestTypeID is TL type id of ChannelsUpdatePaidMessagesPriceRequest.
const ChannelsUpdatePaidMessagesPriceRequestTypeID = 0xfc84653f

// Ensuring interfaces in compile-time for ChannelsUpdatePaidMessagesPriceRequest.
var (
	_ bin.Encoder     = &ChannelsUpdatePaidMessagesPriceRequest{}
	_ bin.Decoder     = &ChannelsUpdatePaidMessagesPriceRequest{}
	_ bin.BareEncoder = &ChannelsUpdatePaidMessagesPriceRequest{}
	_ bin.BareDecoder = &ChannelsUpdatePaidMessagesPriceRequest{}
)

func (u *ChannelsUpdatePaidMessagesPriceRequest) Zero() bool {
	if u == nil {
		return true
	}
	if !(u.Channel == nil) {
		return false
	}
	if !(u.SendPaidMessagesStars == 0) {
		return false
	}

	return true
}

// String implements fmt.Stringer.
func (u *ChannelsUpdatePaidMessagesPriceRequest) String() string {
	if u == nil {
		return "ChannelsUpdatePaidMessagesPriceRequest(nil)"
	}
	type Alias ChannelsUpdatePaidMessagesPriceRequest
	return fmt.Sprintf("ChannelsUpdatePaidMessagesPriceRequest%+v", Alias(*u))
}

// FillFrom fills ChannelsUpdatePaidMessagesPriceRequest from given interface.
func (u *ChannelsUpdatePaidMessagesPriceRequest) FillFrom(from interface {
	GetChannel() (value InputChannelClass)
	GetSendPaidMessagesStars() (value int64)
}) {
	u.Channel = from.GetChannel()
	u.SendPaidMessagesStars = from.GetSendPaidMessagesStars()
}

// TypeID returns type id in TL schema.
//
// See https://core.telegram.org/mtproto/TL-tl#remarks.
func (*ChannelsUpdatePaidMessagesPriceRequest) TypeID() uint32 {
	return ChannelsUpdatePaidMessagesPriceRequestTypeID
}

// TypeName returns name of type in TL schema.
func (*ChannelsUpdatePaidMessagesPriceRequest) TypeName() string {
	return "channels.updatePaidMessagesPrice"
}

// TypeInfo returns info about TL type.
func (u *ChannelsUpdatePaidMessagesPriceRequest) TypeInfo() tdp.Type {
	typ := tdp.Type{
		Name: "channels.updatePaidMessagesPrice",
		ID:   ChannelsUpdatePaidMessagesPriceRequestTypeID,
	}
	if u == nil {
		typ.Null = true
		return typ
	}
	typ.Fields = []tdp.Field{
		{
			Name:       "Channel",
			SchemaName: "channel",
		},
		{
			Name:       "SendPaidMessagesStars",
			SchemaName: "send_paid_messages_stars",
		},
	}
	return typ
}

// Encode implements bin.Encoder.
func (u *ChannelsUpdatePaidMessagesPriceRequest) Encode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode channels.updatePaidMessagesPrice#fc84653f as nil")
	}
	b.PutID(ChannelsUpdatePaidMessagesPriceRequestTypeID)
	return u.EncodeBare(b)
}

// EncodeBare implements bin.BareEncoder.
func (u *ChannelsUpdatePaidMessagesPriceRequest) EncodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't encode channels.updatePaidMessagesPrice#fc84653f as nil")
	}
	if u.Channel == nil {
		return fmt.Errorf("unable to encode channels.updatePaidMessagesPrice#fc84653f: field channel is nil")
	}
	if err := u.Channel.Encode(b); err != nil {
		return fmt.Errorf("unable to encode channels.updatePaidMessagesPrice#fc84653f: field channel: %w", err)
	}
	b.PutLong(u.SendPaidMessagesStars)
	return nil
}

// Decode implements bin.Decoder.
func (u *ChannelsUpdatePaidMessagesPriceRequest) Decode(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode channels.updatePaidMessagesPrice#fc84653f to nil")
	}
	if err := b.ConsumeID(ChannelsUpdatePaidMessagesPriceRequestTypeID); err != nil {
		return fmt.Errorf("unable to decode channels.updatePaidMessagesPrice#fc84653f: %w", err)
	}
	return u.DecodeBare(b)
}

// DecodeBare implements bin.BareDecoder.
func (u *ChannelsUpdatePaidMessagesPriceRequest) DecodeBare(b *bin.Buffer) error {
	if u == nil {
		return fmt.Errorf("can't decode channels.updatePaidMessagesPrice#fc84653f to nil")
	}
	{
		value, err := DecodeInputChannel(b)
		if err != nil {
			return fmt.Errorf("unable to decode channels.updatePaidMessagesPrice#fc84653f: field channel: %w", err)
		}
		u.Channel = value
	}
	{
		value, err := b.Long()
		if err != nil {
			return fmt.Errorf("unable to decode channels.updatePaidMessagesPrice#fc84653f: field send_paid_messages_stars: %w", err)
		}
		u.SendPaidMessagesStars = value
	}
	return nil
}

// GetChannel returns value of Channel field.
func (u *ChannelsUpdatePaidMessagesPriceRequest) GetChannel() (value InputChannelClass) {
	if u == nil {
		return
	}
	return u.Channel
}

// GetSendPaidMessagesStars returns value of SendPaidMessagesStars field.
func (u *ChannelsUpdatePaidMessagesPriceRequest) GetSendPaidMessagesStars() (value int64) {
	if u == nil {
		return
	}
	return u.SendPaidMessagesStars
}

// GetChannelAsNotEmpty returns mapped value of Channel field.
func (u *ChannelsUpdatePaidMessagesPriceRequest) GetChannelAsNotEmpty() (NotEmptyInputChannel, bool) {
	return u.Channel.AsNotEmpty()
}

// ChannelsUpdatePaidMessagesPrice invokes method channels.updatePaidMessagesPrice#fc84653f returning error if any.
//
// See https://core.telegram.org/method/channels.updatePaidMessagesPrice for reference.
func (c *Client) ChannelsUpdatePaidMessagesPrice(ctx context.Context, request *ChannelsUpdatePaidMessagesPriceRequest) (UpdatesClass, error) {
	var result UpdatesBox

	if err := c.rpc.Invoke(ctx, request, &result); err != nil {
		return nil, err
	}
	return result.Updates, nil
}
