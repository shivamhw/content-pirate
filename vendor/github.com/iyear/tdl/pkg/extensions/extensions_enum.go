// Code generated by go-enum DO NOT EDIT.
// Version: 0.5.8
// Revision: 3d844c8ecc59661ed7aa17bfd65727bc06a60ad8
// Build Date: 2023-09-18T14:55:21Z
// Built By: goreleaser

package extensions

import (
	"fmt"
	"strings"
)

const (
	// ExtensionTypeGithub is a ExtensionType of type github.
	ExtensionTypeGithub ExtensionType = "github"
	// ExtensionTypeLocal is a ExtensionType of type local.
	ExtensionTypeLocal ExtensionType = "local"
)

var ErrInvalidExtensionType = fmt.Errorf("not a valid ExtensionType, try [%s]", strings.Join(_ExtensionTypeNames, ", "))

var _ExtensionTypeNames = []string{
	string(ExtensionTypeGithub),
	string(ExtensionTypeLocal),
}

// ExtensionTypeNames returns a list of possible string values of ExtensionType.
func ExtensionTypeNames() []string {
	tmp := make([]string, len(_ExtensionTypeNames))
	copy(tmp, _ExtensionTypeNames)
	return tmp
}

// ExtensionTypeValues returns a list of the values for ExtensionType
func ExtensionTypeValues() []ExtensionType {
	return []ExtensionType{
		ExtensionTypeGithub,
		ExtensionTypeLocal,
	}
}

// String implements the Stringer interface.
func (x ExtensionType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x ExtensionType) IsValid() bool {
	_, err := ParseExtensionType(string(x))
	return err == nil
}

var _ExtensionTypeValue = map[string]ExtensionType{
	"github": ExtensionTypeGithub,
	"local":  ExtensionTypeLocal,
}

// ParseExtensionType attempts to convert a string to a ExtensionType.
func ParseExtensionType(name string) (ExtensionType, error) {
	if x, ok := _ExtensionTypeValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _ExtensionTypeValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return ExtensionType(""), fmt.Errorf("%s is %w", name, ErrInvalidExtensionType)
}

// Set implements the Golang flag.Value interface func.
func (x *ExtensionType) Set(val string) error {
	v, err := ParseExtensionType(val)
	*x = v
	return err
}

// Get implements the Golang flag.Getter interface func.
func (x *ExtensionType) Get() interface{} {
	return *x
}

// Type implements the github.com/spf13/pFlag Value interface.
func (x *ExtensionType) Type() string {
	return "ExtensionType"
}
